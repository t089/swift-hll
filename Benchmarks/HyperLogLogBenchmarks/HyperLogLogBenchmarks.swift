// Benchmark boilerplate generated by Benchmark

import Benchmark
import Foundation
import HyperLogLog

let benchmarks : @Sendable () -> () = {

    let parameterization : [UInt32] = [10, 100, 1_000, 10_000, 100_000, 1_000_000]

    parameterization.forEach { n in
        Benchmark("HyperLogLog insert \(n) elements with hashing", configuration: .init(tags: ["count": "\(n)"])) { benchmark in
            var hll = HyperLogLog(precision: 16)
            benchmark.startMeasurement()
            for i in 0..<n {
                blackHole(hll.insert(i))
            }
        }

        Benchmark("HyperLogLog insert \(n) elements", configuration: .init(tags: ["count": "\(n)"])) { benchmark in
            var hll = HyperLogLog(precision: 16)
            benchmark.startMeasurement()
            for i in 0..<n {
                blackHole(hll.insertRaw(i))
            }
        }

        Benchmark("HyperLogLog insert \(n) random elements", configuration: .init(tags: ["count": "\(n)"])) { benchmark in
            var hll = HyperLogLog(precision: 16)
            let range = UInt32.min ... UInt32.max
            let elements = (0..<n).map { _ in range.randomElement()! }
            benchmark.startMeasurement()
            for i in 0..<n {
                blackHole(hll.insertRaw(elements[Int(i)]))
            }
        }

        Benchmark("HyperLogLog estimateUniqueCount \(n) elements", configuration: .init(tags: ["count": "\(n)"])) { benchmark in
            var hll = HyperLogLog(precision: 16)
            for i in 0..<n {
                hll.insertRaw(i)
            }
            benchmark.startMeasurement()
            blackHole(hll.estimatedUniqueCount)
        }
    }
}
